class Api {
    constructor({baseUrl, headers}) {
        this.baseUrl = baseUrl;
        this.headers = headers;
    }
    makeFetch(url, method='GET', body=undefined) {
        if (body) {
            body = JSON.stringify(body);
        }
        return fetch(`${this.baseUrl}/${url}`, {
            method,
            headers: this.headers,
            body
            })
            .then(res => {
                if (res.ok) {
                    return res.json();
                }
            })
            .catch((err) => {
                throw err
            });
    }
    getInitialCards() {
        return this.makeFetch(`cards`);     
    }

    setProfile() {
        return this.makeFetch(`users/me`)
        //  Надо исправить: Необходимо вынести такие параметры как IP адрес, url или данные авторизации за класс и передавать 
        // в качестве параметра при инициализации класса 
                //  Надо исправить: Вызывая методы другого классе из класса ip вы создаёте жёсткую связь между классами
                // Надо вызывать методы класса API из других классов, а здесь возвращать  return с результатом     
    }
    updateProfile(userName, userJob) {
        return this.makeFetch(`users/me`, 'PATCH', {name: userName, about: userJob})
    }
    setCard(name, link) {
        return this.makeFetch(`cards`, 'POST', {name: name, link: link})  
    } 
    
}
	/**
    * Здравствуйте. В целом работа очень хорошая, но...
    *  
    * 	
        * Класс Api это отдельный класс который ничего не знает о других классах и методах
        * Вы можете только получать данные из этого класса и использовать эти данные.
        * Представьте, что я дам Вам другой класс(допустим DataBase) к внутренностям которого вы не будете иметь доступ и даже прочитать этот файл не сможете
        * скажу что у него есть несколько методов  getInitialCards deleteCard addCard, editUserInfo, setUserInfo и так далее
        * Который только возвращает данные, а вы можите получить только обращась к этим методам.
        * Соответственно в классе нельзя реализовать такие методы как querySelector или обратиться к другому классу, а только обратитьсяк методам.
        * Отдельная обязанность. Таким же способом Вы обращаетесь к серверу. Вы не знаете, что на сервере, даже язык программирования, но вы знаете методы
        * к которым обращаетесь и способ обращения. Это и есть обязанность отдельного класса.
      
      
     
      
 Хочу заметить что данные авторизации лучше передать при создании класса API в ввиде объекта	
    
     * Вызывать же методы класса Api лучше из других классов
     *
     * Стоит отметить, что реализации в классе API быть не должно. Точнее прямого взаимодействия. Методы могут вызываться
     * из других классов и возвращать данные, а работа с этими данными должны быть непосредственно в классах создаваемых в 8 спринте
    *
     * работа принимается только при исправлении всех "Надо исправить"
     *
    */

/** 
 * Работа принимается.
 * 
 * 
 */